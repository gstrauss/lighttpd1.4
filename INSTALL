================================================================================
 INSTALLATION
================================================================================

This guide describes installation of lighttpd both for Linux and mTCP.
For Linux, we also provide the patches for multi-threading and SO_REUSEPORT.
For more detail, please look at the description below.
Each version of lighttpd should be configured differently and then compiled.

================================================================================
 Original version
================================================================================

============
Installation
============


Quick Installation
------------------

Obtain lighttpd source from https://download.lighttpd.net/lighttpd/

  $ release=$(curl -s https://download.lighttpd.net/lighttpd/releases-1.4.x/latest.txt)
  $ curl -s -o $release.tar.xz https://download.lighttpd.net/lighttpd/releases-1.4.x/$release.tar.xz
  $ tar xvJf $release.tar.xz

compile and install:

  $ cd $release
  $ ./autogen.sh
  $ ./configure -C
  $ make check
  $ /usr/bin/sudo make install

Take a look at the sample config files in ./doc/config/*.conf,
make your own copy of the samples, and modify for your needs.


Online documentation
--------------------

https://wiki.lighttpd.net/Devel
https://wiki.lighttpd.net/InstallFromSource


Custom Installation
-------------------

required packages ::

  autoconf
  automake
  libtool
  m4
  pkg-config

recommended additional packages ::

  pcre2
  pcre2-devel
  lua
  lua-devel
  nettle
  nettle-devel

optional packages for optional features ::

  bzip2-devel         # bzip2      ./configure --with-bzip2
  bzip2-libs
  cyrus-sasl          # SASL       ./configure --with-sasl
  cyrus-sasl-devel
  gnutls              # GnuTLS     ./configure --with-gnutls
  gnutls-devel
  krb5-devel          # Kerberos5  ./configure --with-krb5
  krb5-libs
  libbrotli           # brotli     ./configure --with-brotli
  brotli-devel
  libdbi              # DBI        ./configure --with-dbi
  libdbi-devel
  libdbi-dbd-mysql
  libdbi-dbd-pgsql
  libdbi-dbd-sqlite
  libdeflate          # libdeflate ./configure --with-libdeflate
  libdeflate-devel
  libmaxminddb        # MaxMindDB  ./configure --with-maxminddb
  libmaxminddb-devel
  libpq               # Postgresql ./configure --with-pgsql
  libpq-devel
  libunwind-devel     # libunwind  ./configure --with-libunwind
  libxml2             # libxml2    ./configure --with-webdav-props
  libxml2-devel
  libxml2-static
  lua                 # Lua        ./configure --with-lua
  lua-devel
  mariadb-devel       # MariaDB    ./configure --with-mysql
  mariadb-libs
  mbedtls             # mbedTLS    ./configure --with-mbedtls
  mbedtls-devel
  nettle              # Nettle     ./configure --with-nettle
  nettle-devel
  nss                 # NSS        ./configure --with-nss
  nss-devel
  openldap            # OpenLDAP   ./configure --with-ldap
  openldap-devel
  openssl-devel       # OpenSSL    ./configure --with-openssl
  openssl-libs
  pam                 # PAM        ./configure --with-pam
  pam-devel
  pcre                # PCRE       ./configure --with-pcre
  pcre-devel
  pcre2               # PCRE       ./configure --with-pcre2     # (default)
  pcre2-devel
  sqlite              # SQLite     ./configure --with-webdav-props
  sqlite-devel
  valgrind            # valgrind   ./configure --with-valgrind
  valgrind-devel
  wolfssl             # wolfSSL    ./configure --with-wolfssl
  wolfssl-devel
  zlib                # zlib       ./configure --with-zlib      # (default)
  zlib-devel
  libzstd             # zstd       ./configure --with-zstd
  libzstd-devel

more options: ./configure --help

re-run ./configure after installing packages

compile and install it with ::

  $ cd $release
  $ ./autogen.sh        # detect/use newer versions of autotools (if present)
  $ ./configure -C      # add --with-xxxxx custom flags
  $ make
  # sudo make install


Running Tests
-------------

required packages to run test harness ::

  (e.g. on Fedora 22, sudo dnf install ...)
  (e.g. on Arch Linux, sudo pacman ... (with lowercased package names))

  perl-Digest
  perl-Digest-MD5
  perl-Encode-Locale
  perl-HTML-Entities-Interpolate
  perl-HTML-Parser
  perl-HTML-Tagset
  perl-HTTP-Date
  perl-HTTP-Message
  perl-IO-HTML
  perl-LWP-MediaTypes
  perl-Test-Harness
  perl-Test-Simple
  perl-Tie-Function
  perl-TimeDate

run test harness

  $ make check


static build using SCons
------------------------

  $ scons -j 4 build_static=1 build_dynamic=0 prefix=/custom/inst/path install

build_dynamic is enabled by default in SConstruct and needs to be disabled for
the static build.  See also the BoolVariable() settings in SConstruct for other
configurable variables that might be set in a customized build.  build_static=1
can be replaced with build_fullstatic=1 to perform lighttpd static build with
modules *and* to link statically against external dependencies.


static build using make
-----------------------

* edit src/Makefile.am and, in the section under 'if LIGHTTPD_STATIC',
  update lighttpd_SOURCES with each module to be included in the static build
* create src/plugin-static.h with list of modules as PLUGIN_INIT(mod_foo)
  for each module 'mod_foo' to be included in the static build

  $ LIGHTTPD_STATIC=yes ./configure -C --enable-static=yes
  $ make
  $ sudo make install

build using CMake and Xcode on Mac OS X with MacPorts
-----------------------------------------------------
* upgrade to latest Mac OS X
* install Xcode from Apple Store (requires latest Mac OS X)
* install MacPorts from https://www.macports.org/install.php

  $ xcodebuild --license
  $ xcode-select --install
  $ sudo port selfupdate
  $ sudo port install autoconf automake cmake libtool m4 pcre2 pkgconfig zlib zstd brotli openssl libxml sqlite3 openldap libunwind libunwind-headers mysql57 openldap
  # Note: some of the above require more fiddling to configure with CMake...

  # cmake and build
  # (all -DWITH_... flags below are optional)
  $ cmake -Wno-dev -DWITH_PCRE2=1 -DWITH_OPENSSL=1 -DWITH_LUA=1 -DWITH_ZLIB=1 -DWITH_ZSTD=1 -DWITH_BROTLI=1 -DWITH_WEBDAV_PROPS=1 .
  $ make -j 4
  $ make test


================================================================================
 mTCP version
================================================================================

You may need to install the following packages to compile lighttpd:
  - gcc (Ubuntu package: gcc)
  - gdb (Ubuntu package: gdb)
  - make (Ubuntu package: make)
  - pcre2-devel (Ubuntu package: libpcre2-dev)
  - numactl-devel (Ubuntu package: libnuma-dev)

Sample config files referenced below may be viewed from the *ancient* patch set:
https://github.com/mtcp-stack/mtcp/tree/master/apps/lighttpd-1.4.32/doc/config/


Configure the program with the following arguments:

  $ ./configure CFLAGS="-O3" \
    --with-libmtcp=${PATH_TO_LIBMTCP} \
    --with-libpsio=${PATH_TO_LIBPSIO} \
    --with-libdpdk=${PATH_TO_LIBDPDK} \
    --with-libonvm=${PATH_TO_LIBONVM} \
    --enable-netmap

  (e.g.
        $ ./configure CFLAGS="-g -O3" \
        --with-libmtcp="<$PATH_TO_MTCP_RELEASE_V3>/mtcp/" \
        --with-libpsio="<$PATH_TO_MTCP_RELEASE_V3>/io_engine/" \
        --with-libdpdk="$RTE_SDK/$RTE_TARGET" \
        --with-libonvm="<$PATH_TO_ONVM>" \
        --enable-netmap
  )

The path should be absolute.

  ## For debugging
  $ ./configure CFLAGS="-g -DINFO -DDBGERR" \
    --with-libmtcp=${PATH_TO_LIBMTCP} --with-libpsio=${PATH_TO_LIBPSIO} \
    --with-libdpdk=${PATH_TO_LIBDPDK} --with-libonvm=${PATH_TO_LIBONVM} \
    --enable-netmap

  (e.g.
        $ ./configure CFLAGS="-g -DINFO -DDBGERR" \
        --with-libmtcp="<$PATH_TO_MTCP_RELEASE_V3>/mtcp/" \
        --with-libpsio="<$PATH_TO_MTCP_RELEASE_V3>/io_engine/" \
        --with-libdpdk="$RTE_SDK/$RTE_TARGET" \
        --with-libonvm="<$PATH_TO_ONVM>" \
        --enable-netmap
  )

Environment variable MTCP_MAX_CONCURRENCY is used to configure
mtcp_conf max_concurrency and max_num_buffers, as well as override
lighttpd.conf server.max-connections and server.max-fds (per thread).
A larger MTCP_MAX_CONCURRENCY uses more memory, so avoid setting it
unnecessarily high.  MTCP_MAX_CONCURRENCY=262144 is high.

lighttpd.conf server.max-fds is also used to set the process-wide RLIMIT_NOFILE,
and it is best to omit lighttpd.conf server.max-fds and instead set ulimits
prior to executing lighttpd.

Please remember to adjust lighttpd.conf file carefully.
Recommended: omit setting server.max-fds; set ulimits prior to lighttpd exec
             OR server.max-fds = 65535 (or something larger than default 4096)
Recommended: server.listen-backlog = 40960
Recommended: disable accesslog to reduce server work and increase performance

Also, remember to locate the 'mtcp.conf' at the directory where the binary lies.
  -- This should be $<path_to_lighttpd>/src/mtcp.conf
Sample mtcp.conf:
https://github.com/mtcp-stack/mtcp/blob/master/apps/lighttpd-1.4.32/src/mtcp.conf

Sample lighttpd configuration files are placed at doc/config/ on github.
https://github.com/mtcp-stack/mtcp/tree/master/apps/lighttpd-1.4.32/doc/config/
The default sample config file assumes that it host web pages in /srv/www/htdocs
directory while it does error logging in /tmp/lighttpd/error.log file. Please
make sure that the directories are created before running lighttpd.
 - Default: lighttpd.conf
 - For mTCP: m-lighttpd.conf

Please use the following command to run lighttpd:
  $ export MTCP_NUM_CORES=${NO_OF_CORES}
  $ export MTCP_MAX_CONCURRENCY=32768
  $ ulimit -n $((MTCP_MAX_CONCURRENCY * 2))
  $ ./src/lighttpd -D -f ${PATH_TO_CONFIG_FILE}
e.g.
  $ export MTCP_NUM_CORES=8
  $ export MTCP_MAX_CONCURRENCY=32768
  $ ulimit -n $((MTCP_MAX_CONCURRENCY * 2))
  $ ./src/lighttpd -D -f ../doc/config/m-lighttpd.conf

Both PATH_OF_CONFIG_FILE and NO_OF_CORES options are required.
If running lighttpd using sudo, place commands in a shell script,
including the environment settings, and use sudo to run the shell script.

================================================================================
 Multi-threaded REUSEPORT version (on Linux)
================================================================================

First, check whether your kernel version is higher than 3.9. This SO_REUSEPORT
option is supported only after Linux-3.9.

Then, please check whether SO_REUSEPORT is defined. Please update
/usr/include/asm-generic/socket.h by adding the following line.
(if it is not already defined)

#define SO_REUSEPORT 15


Aside: original patches offered an option to share listen sockets among threads
instead of using SO_REUSEPORT.  While possible, that is not implemented in the
current patch set.


Configure the program with the following arguments:

  $ ./configure CFLAGS="-O3" --enable-multithreading

Please remember to adjust lighttpd.conf file carefully.
Recommended: comment out server.listen-backlog; use the lighttpd defaults (4096)
Recommended: disable accesslog to reduce server work and increase performance
A sample lighttpd.conf file is placed@: doc/config/lighttpd.conf
https://github.com/mtcp-stack/mtcp/tree/master/apps/lighttpd-1.4.32/doc/config/

Please use the following command to run lighttpd:
  $ export MTCP_NUM_CORES=${NO_OF_CORES}
  $ ./src/lighttpd -D -f ${PATH_TO_CONFIG_FILE}

================================================================================

                    Contact: mtcp-user at list.ndsl.kaist.edu
                               April 2, 2014.
              Muhammad Asim Jamshed <ajamshed at ndsl.kaist.edu>
